// Code generated by sqlc. DO NOT EDIT.
// source: like.sql

package db

import (
	"context"
	"database/sql"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes(
    user_id,
    content_id
) values (
$1, $2 
) RETURNING user_id, content_id, liked, update_at
`

type CreateLikeParams struct {
	UserID    int64 `json:"user_id"`
	ContentID int64 `json:"content_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike, arg.UserID, arg.ContentID)
	var i Like
	err := row.Scan(
		&i.UserID,
		&i.ContentID,
		&i.Liked,
		&i.UpdateAt,
	)
	return i, err
}

const getLike = `-- name: GetLike :one
SELECT liked from likes
WHERE content_id = $1 AND user_id = $2
`

type GetLikeParams struct {
	ContentID int64 `json:"content_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getLike, arg.ContentID, arg.UserID)
	var liked sql.NullBool
	err := row.Scan(&liked)
	return liked, err
}

const totalLikesForContent = `-- name: TotalLikesForContent :one
SELECT COUNT(*) AS Total_likes FROM likes
WHERE content_id = $1 AND liked= true
`

func (q *Queries) TotalLikesForContent(ctx context.Context, contentID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, totalLikesForContent, contentID)
	var total_likes int64
	err := row.Scan(&total_likes)
	return total_likes, err
}
