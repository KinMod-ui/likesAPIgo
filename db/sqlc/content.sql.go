// Code generated by sqlc. DO NOT EDIT.
// source: content.sql

package db

import (
	"context"
)

const createContent = `-- name: CreateContent :one
INSERT INTO content(
    title,
    user_id 
) VALUES (
  $1, $2
) RETURNING id, title, user_id, created_at
`

type CreateContentParams struct {
	Title  string `json:"title"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) CreateContent(ctx context.Context, arg CreateContentParams) (Content, error) {
	row := q.db.QueryRowContext(ctx, createContent, arg.Title, arg.UserID)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getContent = `-- name: GetContent :one
SELECT id, title, user_id, created_at FROM content 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContent(ctx context.Context, id int64) (Content, error) {
	row := q.db.QueryRowContext(ctx, getContent, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listContentOfUser = `-- name: ListContentOfUser :many
SELECT id, title, user_id, created_at FROM content 
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListContentOfUserParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContentOfUser(ctx context.Context, arg ListContentOfUserParams) ([]Content, error) {
	rows, err := q.db.QueryContext(ctx, listContentOfUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Content
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
